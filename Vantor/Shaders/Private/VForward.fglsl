#version 460 core

out vec4 FragColor;

struct VDirLight {
    vec3 direction;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct VSpotLight {
    vec3 position;
    vec3 direction;
    float cutOff;
    float outerCutOff;
  
    float constant;
    float linear;
    float quadratic;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;       
};

struct PointLight {
    vec3 position;
    float constant;        // attenuation constant

    vec3 ambient;
    float linear;          // attenuation linear

    vec3 diffuse;
    float quadratic;       // attenuation quadratic

    vec3 specular;
    float padding;         // pad to 16 bytes alignment
};

const int FORWARD_MAX_POINT_LIGHTS = 8; // Just for Forward Rendering, because of GLSL flexibility issues

// This is currently bound to the Update function in the VOpenGLUBO and binding 0
layout(std140, binding = 0) uniform VCommonUniforms
{
    mat4 Vu_View;
    mat4 Vu_Projection;
    vec3 Vu_CameraPosition;
    float _pad0; // padding for alignment

    int Vu_NumPointLights;
    vec3 _pad1; // padding for alignment

    PointLight Vu_PointLights[FORWARD_MAX_POINT_LIGHTS];
};


in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoords;

// Material uniforms
uniform sampler2D diffuseMap;
uniform sampler2D specularMap;
uniform bool useDiffuseTexture;
uniform bool useSpecularTexture;
uniform vec3 diffuseColor;
uniform vec3 specularColor;
uniform float shininess;

uniform VDirLight VdirLight;
uniform VSpotLight VspotLight;

vec3 CalcVDirLight(VDirLight light, vec3 normal, vec3 viewDir);
vec3 CalcVPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);
vec3 CalcVSpotLight(VSpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

void main()
{
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(Vu_CameraPosition - FragPos);
    
    vec3 result = CalcVDirLight(VdirLight, norm, viewDir);
    
    for (int i = 0; i < Vu_NumPointLights; i++)
        result += CalcVPointLight(Vu_PointLights[i], norm, FragPos, viewDir);
    
    // result += CalcVSpotLight(VspotLight, norm, FragPos, viewDir);
    
    FragColor = vec4(result, 1.0);
}

vec3 GetDiffuseColor()
{
    if (useDiffuseTexture)
        return vec3(texture(diffuseMap, TexCoords));
    else
        return diffuseColor;
}

vec3 GetSpecularColor()
{
    if (useSpecularTexture)
        return vec3(texture(specularMap, TexCoords));
    else
        return specularColor;
}

vec3 CalcVDirLight(VDirLight light, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.direction);
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);

    vec3 ambient = light.ambient * GetDiffuseColor();
    vec3 diffuse = light.diffuse * diff * GetDiffuseColor();
    vec3 specular = light.specular * spec * GetSpecularColor();

    return (ambient + diffuse + specular);
}

vec3 CalcVPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

    vec3 ambient = light.ambient * GetDiffuseColor();
    vec3 diffuse = light.diffuse * diff * GetDiffuseColor();
    vec3 specular = light.specular * spec * GetSpecularColor();

    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;

    return (ambient + diffuse + specular);
}

vec3 CalcVSpotLight(VSpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));
    float theta = dot(lightDir, normalize(-light.direction));
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

    vec3 ambient = light.ambient * GetDiffuseColor();
    vec3 diffuse = light.diffuse * diff * GetDiffuseColor();
    vec3 specular = light.specular * spec * GetSpecularColor();

    ambient *= attenuation * intensity;
    diffuse *= attenuation * intensity;
    specular *= attenuation * intensity;

    return (ambient + diffuse + specular);
}
