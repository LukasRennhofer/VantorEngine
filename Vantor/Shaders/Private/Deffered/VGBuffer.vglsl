#version 460 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;

out vec3 FragPos;
out vec2 TexCoords;
out vec3 Normal;

// Constants
const int FORWARD_MAX_POINT_LIGHTS = 8; // Just for Forward Rendering, because of GLSL flexibility issues

struct PointLight {
    vec3 position;
    float constant;        // attenuation constant

    vec3 ambient;
    float linear;          // attenuation linear

    vec3 diffuse;
    float quadratic;       // attenuation quadratic

    vec3 specular;
    float padding;         // pad to 16 bytes alignment
};

// This is currently bound to the Update function in the VOpenGLUBO and binding 0
layout(std140, binding = 0) uniform VCommonUniforms
{
    mat4 Vu_View;
    mat4 Vu_Projection;
    vec3 Vu_CameraPosition;
    float _pad0; // padding for alignment

    int Vu_NumPointLights;
    vec3 _pad1; // padding for alignment

    PointLight Vu_PointLights[FORWARD_MAX_POINT_LIGHTS];
};

uniform mat4 model; // We only take this one

void main()
{
    vec4 worldPos = model * vec4(aPos, 1.0);
    FragPos = worldPos.xyz; 
    TexCoords = aTexCoords;
    
    mat3 normalMatrix = transpose(inverse(mat3(model)));
    Normal = normalMatrix * aNormal;

    gl_Position = Vu_Projection * Vu_View * worldPos;
}