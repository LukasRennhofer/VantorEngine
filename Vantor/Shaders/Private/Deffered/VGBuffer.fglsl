#version 460 core

layout (location = 0) out vec4 gAlbedoSpec;  // RGB = Albedo, A = Specular or unused
layout (location = 1) out vec3 gNormal;      // World-space normal (with padding)
layout (location = 2) out vec4 gMaterial;    // R = Metallic, G = Roughness, B = AO, A = padding
layout (location = 3) out vec3 gPosition;    // World-space position

in vec2 TexCoords;
in vec3 FragPos;
in mat3 TBN; // TBN matrix passed from vertex shader

// Textures
uniform sampler2D VTextureDiffuse;
uniform sampler2D VTextureNormal;
uniform sampler2D VTextureMetallic;   // R channel = metallic
uniform sampler2D VTextureRoughness;  // R channel = roughness
uniform sampler2D VTextureAO;         // R channel = ambient occlusion

// Fallbacks
uniform vec3 VColor; 
uniform bool VUseDiffuseTexture;

// === Helper: Decode normal from normal map ===
vec3 getNormalFromMap()
{
    vec3 tangentNormal = texture(VTextureNormal, TexCoords).rgb;
    tangentNormal = tangentNormal * 2.0 - 1.0; // [0,1] to [-1,1]
    return normalize(TBN * tangentNormal);     // Transform to world-space
}

void main()
{
    // === Albedo ===
    vec3 albedo = VUseDiffuseTexture 
        ? texture(VTextureDiffuse, TexCoords).rgb 
        : VColor;

    gAlbedoSpec.rgb = albedo;
    gAlbedoSpec.a = 1.0; // unused or specular placeholder

    // === Normal ===
    gNormal = getNormalFromMap();

    // === Material Properties ===
    float metallic  = texture(VTextureMetallic, TexCoords).r;
    float roughness = texture(VTextureRoughness, TexCoords).r;
    float ao        = texture(VTextureAO, TexCoords).r;

    gMaterial = vec4(metallic, roughness, ao, 1.0);

    // === Position ===
    gPosition = FragPos;
}
