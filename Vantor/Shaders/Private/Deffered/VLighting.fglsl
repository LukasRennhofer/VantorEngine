#version 460 core

out vec4 FragColor;

in vec2 TexCoords;

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gAlbedoSpec;
uniform sampler2D gMaterial; // metallic (r), roughness (g), ao (b)

#include <Vantor/VCommon.hglsl>
#include <Vantor/Data/VSLightData.hglsl>
#include <Vantor/VPBR.hglsl>

void main()
{
    // G-buffer
    vec3 FragPos  = texture(gPosition, TexCoords).rgb;
    vec3 Normal   = normalize(texture(gNormal, TexCoords).rgb);
    vec3 Albedo   = texture(gAlbedoSpec, TexCoords).rgb;
    vec3 Material = texture(gMaterial, TexCoords).rgb;

    float Metallic  = Material.r;
    float Roughness = Material.g;
    float AO        = Material.b;

    vec3 V = normalize(Vu_CameraPosition - FragPos);
    vec3 N = normalize(Normal);

    // Base reflectance
    vec3 F0 = vec3(0.04);
    F0 = mix(F0, Albedo, Metallic);

    vec3 Lo = vec3(0.0);

    // ------------------------
    // Point Lights
    // ------------------------
    for (int i = 0; i < Vu_NumPointLights; ++i)
    {
        VPointLightData light = Vu_PointLights[i];
        vec3 L = light.position - FragPos;
        float distance = length(L);

        if (distance < light.radius)
        {
            L = normalize(L);
            vec3 H = normalize(V + L);
            float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * distance * distance);
            vec3 radiance = light.diffuse * attenuation;

            float NDF = DistributionGGX(N, H, Roughness);
            float G   = GeometrySmith(N, V, L, Roughness);
            vec3  F   = fresnelSchlick(max(dot(H, V), 0.0), F0);

            vec3 numerator = NDF * G * F;
            float denom = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001;
            vec3 specular = numerator / denom;

            vec3 kS = F;
            vec3 kD = (1.0 - kS) * (1.0 - Metallic);
            float NdotL = max(dot(N, L), 0.0);

            Lo += (kD * Albedo / PI + specular) * radiance * NdotL;
        }
    }

    // ------------------------
    // Directional Lights
    // ------------------------
    for (int i = 0; i < Vu_NumDirectionalLights; ++i)
    {
        VDirectionalLightData light = Vu_DirectionalLights[i];
        vec3 L = normalize(-light.direction); // Light direction *towards* surface
        vec3 H = normalize(V + L);
        vec3 radiance = light.diffuse;

        float NDF = DistributionGGX(N, H, Roughness);
        float G   = GeometrySmith(N, V, L, Roughness);
        vec3  F   = fresnelSchlick(max(dot(H, V), 0.0), F0);

        vec3 numerator = NDF * G * F;
        float denom = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001;
        vec3 specular = numerator / denom;

        vec3 kS = F;
        vec3 kD = (1.0 - kS) * (1.0 - Metallic);
        float NdotL = max(dot(N, L), 0.0);

        Lo += (kD * Albedo / PI + specular) * radiance * NdotL;
    }

    // ------------------------
    // Spot Lights
    // ------------------------
    for (int i = 0; i < Vu_NumSpotLights; ++i)
    {
        VSpotLightData light = Vu_SpotLights[i];
        vec3 L = light.position - FragPos;
        float distance = length(L);

        if (distance < light.radius)
        {
            L = normalize(L);
            float theta = dot(L, normalize(-light.direction)); // Angle between light dir and surface dir
            float epsilon = light.cutOff - light.outerCutOff;
            float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

            float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * distance * distance);
            vec3 radiance = light.diffuse * attenuation * intensity;

            vec3 H = normalize(V + L);

            float NDF = DistributionGGX(N, H, Roughness);
            float G   = GeometrySmith(N, V, L, Roughness);
            vec3  F   = fresnelSchlick(max(dot(H, V), 0.0), F0);

            vec3 numerator = NDF * G * F;
            float denom = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001;
            vec3 specular = numerator / denom;

            vec3 kS = F;
            vec3 kD = (1.0 - kS) * (1.0 - Metallic);
            float NdotL = max(dot(N, L), 0.0);

            Lo += (kD * Albedo / PI + specular) * radiance * NdotL;
        }
    }

    // ------------------------
    // Global Ambient Light
    // ------------------------
    vec3 ambient = Vu_AmbientLight.ambientColor * Albedo * AO;

    vec3 color = ambient + Lo;

    // Reinhard tone mapping & gamma correction
    color = color / (color + vec3(1.0));
    color = pow(color, vec3(1.0 / 2.2));

    FragColor = vec4(color, 1.0);
}
